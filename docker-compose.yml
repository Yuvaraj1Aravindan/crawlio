

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: crawlio_postgres
    environment:
      POSTGRES_DB: crawlio
      POSTGRES_USER: crawlio_user
      POSTGRES_PASSWORD: crawlio_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - crawlio_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U crawlio_user -d crawlio"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: crawlio_redis
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - crawlio_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Main Application
  app:
    build: .
    container_name: crawlio_app
    environment:
      NODE_ENV: production
      PORT: 3000
      DATABASE_URL: postgresql://crawlio_user:crawlio_password@postgres:5432/crawlio
      REDIS_URL: redis://redis:6379
      JWT_SECRET: your-super-secret-jwt-key-change-this-in-production
      JWT_EXPIRES_IN: 7d
      STRIPE_SECRET_KEY: ${STRIPE_SECRET_KEY}
      STRIPE_PUBLISHABLE_KEY: ${STRIPE_PUBLISHABLE_KEY}
      STRIPE_WEBHOOK_SECRET: ${STRIPE_WEBHOOK_SECRET}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      AWS_REGION: ${AWS_REGION:-us-east-1}
      AWS_S3_BUCKET: ${AWS_S3_BUCKET}
      RATE_LIMIT_WINDOW_MS: 900000
      RATE_LIMIT_MAX_REQUESTS: 100
      MAX_CONCURRENT_CRAWLS: 10
      CRAWL_TIMEOUT: 30000
      USER_AGENT: Mozilla/5.0 (compatible; Crawlio/1.0; +https://crawlio.com)
      LOG_LEVEL: info
      FRONTEND_URL: ${FRONTEND_URL:-http://localhost:3001}
    ports:
      - "3000:3000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - crawlio_network
    volumes:
      - ./logs:/usr/src/app/logs
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s



volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  crawlio_network:
    driver: bridge
